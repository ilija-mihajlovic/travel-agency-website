$color-primary: #55c57a;
$color-primary-light: #7ed56f;
$color-primary-dark: #28b485;

$color-grey-dark: #777;
$color-white: #fff;
$color-black: #000;

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  font-size: 16px;
  line-height: 1.7;
  color: $color-grey-dark;
  padding: 30px;
  width: 100%;
  height: 100%;
}

.header {
  height: 95vh;
  background-image: linear-gradient(to right bottom, rgba($color-primary-light, 0.8), rgba($color-primary-dark, 0.8)),
    url("../img/hero.jpg");
  background-size: cover;
  background-position: top;
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  position: relative;
  transition: all 0.8s;

  &__logo-box {
    position: absolute;
    top: 40px;
    left: 40px;
  }

  &__logo {
    height: 35px;
  }

  &__text-box {
    position: absolute;
    top: 40%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center;
  }
}

.heading-primary {
  color: $color-white;
  text-transform: uppercase;

  backface-visibility: hidden;
  margin-bottom: 60px;

  &--main {
    display: block;
    font-size: 60px;
    font-weight: 400;
    letter-spacing: 35px;
    animation: moveInLeft 1s ease-out;
  }

  &--sub {
    display: block;
    font-size: 20px;
    font-weight: 700;
    letter-spacing: 17.4px;
    animation: moveInRight 1s ease-out;
  }
}

@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-100px);
  }

  80% {
    transform: translateX(10px);
  }

  100% {
    opacity: 1;
    transform: translate(0);
  }
}

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(100px);
  }

  80% {
    transform: translateX(-10px);
  }

  100% {
    opacity: 1;
    transform: translate(0);
  }
}

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(30px);
  }

  100% {
    opacity: 1;
    transform: translate(0);
  }
}

.btn {
  &:link, &:visited {
    text-transform: uppercase;
    text-decoration: none;
    padding: 15px 40px;
    display: inline-block;
    border-radius: 100px;
    transition: all 0.2s;
    position: relative;
  }

  &:hover {
    transform: translateY(-3px);
    box-shadow: 0 10px 20px rgba($color-black, 0.2);

    &::after {
      transform: scaleX(1.4) scaleY(1.6);
      opacity: 0;
    }
  }

  &:active {
    transform: translateY(-1px);
    box-shadow: 0 5px 10px rgba($color-black, 0.2);
  }

  &--white {
    background-color: $color-white;
    color: $color-grey-dark;

    &::after {
      background-color: $color-white;
    }
  }

  &::after {
    content: "";
    display: inline-block;
    height: 100%;
    width: 100%;
    border-radius: 100px;
    position: absolute;
    transition: all 0.4s;
    top: 0;
    left: 0;
    z-index: -1;
  }

  &--animated {
    animation: moveInBottom 0.5s ease-out 0.75s;
    animation-fill-mode: backwards;
  }
}

@mixin generate-typography-classes($map) {
  @each $key, $value in $map {
    .#{$key} {
      @each $property, $property-value in $value {
        #{$property}: $property-value;
      }
    }
  }
}

@function add-important-to-all-properties($map) {
  $new-map: ();

  @each $key, $value in $map {
    $new-properties: ();

    @each $property, $property-value in $value {
      $new-property-value: #{$property-value} !important;
      $new-properties: map-merge($new-properties, ( #{$property}: $new-property-value ));
    }

    $new-map: map-merge($new-map, ( #{$key}: $new-properties ));
  }

  @return $new-map;
}

$typography-list: (
  h1: (
    font-size: 3rem,
    font-weight: 700,
    line-height: 1.2,
    margin-bottom: 2rem,
  ),
  h2: (
    font-size: 2.5rem,
    font-weight: 700,
    line-height: 1.2,
    margin-bottom: 2rem,
  ),
  h3: (
    font-size: 2rem,
    font-weight: 700,
    line-height: 1.2,
    margin-bottom: 2rem,
  ),
  h4: (
    font-size: 1.5rem,
    font-weight: 700,
    line-height: 1.2,
    margin-bottom: 2rem,
  ),
  h5: (
    font-size: 1.25rem,
    font-weight: 700,
    line-height: 1.2,
    margin-bottom: 2rem,
  )
);

$typography-list-with-important: add-important-to-all-properties($typography-list);

@include generate-typography-classes($typography-list-with-important);